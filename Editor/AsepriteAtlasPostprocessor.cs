using UnityEngine;
using UnityEditor;
using Miscreant.Aseprite.Editor;
using System.Collections.Generic;
using System.IO;

/// <summary>
/// Automatically adds sprite data to packed atlases generated by importing Aseprite files
/// </summary>
class AsepriteAtlasPostprocessor : AssetPostprocessor // TODO: Miscreant: Move this to a precompiled .dll to prevent modification once it's stable
{
	void OnPreprocessTexture()
	{
		if (assetPath.Contains(AsepriteImporter.ATLAS_SUFFIX))
		{
			// Check for associated JSON data, must be in the same folder.
			string dataAssetPath = assetPath.Substring(0, assetPath.LastIndexOf(AsepriteImporter.ATLAS_SUFFIX)) + $"{AsepriteImporter.ATLAS_SUFFIX}.json";

			// Load the sheet data via File IO since there's a chance Unity may not have imported it as an asset yet
			string projectPath = Application.dataPath.Substring(0, Application.dataPath.LastIndexOf("/Assets"));
			string dataAbsolutePath = projectPath + "/" + dataAssetPath;

			var sheetData = JsonUtility.FromJson<SpriteSheetData>(File.ReadAllText(dataAbsolutePath));

			UpdatePackedSprites((TextureImporter)assetImporter, sheetData);
		}
	}

	private static void UpdatePackedSprites(TextureImporter ti, SpriteSheetData sheetData)
	{
		List<SpriteMetaData> existingSpriteData = new List<SpriteMetaData>(ti.spritesheet);
		List<SpriteMetaData> newSpriteData = new List<SpriteMetaData>(sheetData.frames.Length);

		int atlasHeight = sheetData.meta.size.h;
		foreach (SpriteSheetData.Frame frame in sheetData.frames)
		{
			var newSprite = new SpriteMetaData();

			int matchIndex = existingSpriteData.FindIndex((sprite) => {
				return sprite.name.Equals(frame.filename);
			});

			if (matchIndex >= 0)
			{
				var existingSprite = existingSpriteData[matchIndex];
				
				newSprite.border = existingSprite.border;
				newSprite.name = existingSprite.name;
			}
			else
			{
				newSprite.border = Vector4.zero;
				newSprite.name = frame.filename;
			}

			newSprite.alignment = (int)SpriteAlignment.Custom;
			newSprite.pivot = new Vector2(
				(frame.sourceSize.w * 0.5f - frame.spriteSourceSize.x) / frame.spriteSourceSize.w,
				(frame.sourceSize.h * 0.5f - (frame.sourceSize.h - frame.spriteSourceSize.y - frame.spriteSourceSize.h)) / frame.spriteSourceSize.h
			);
			
			var textureRect = frame.GetUnityTextureRect(atlasHeight);
			newSprite.rect = new Rect(
				textureRect.x,
				textureRect.y,
				textureRect.w,
				textureRect.h
			);

			newSpriteData.Add(newSprite);
		}

		ti.spritesheet = newSpriteData.ToArray();
	}
}